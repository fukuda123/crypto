#!/usr/bin/python3
# -*- coding: utf-8 -*-

# ----------------------------------------------------------
# m12345gen.pyのテストに使ったスクリプトです。
# ----------------------------------------------------------

# ----------------------------------------------------------
# 新しい鍵の値（KEY_NEW）
# ----------------------------------------------------------
key_new = "0f0e0d0c0b0a09080706050403020100"

# ----------------------------------------------------------
# KEY_NEWを暗号化・検証するための鍵の値（KEY_AuthID）
# ----------------------------------------------------------
key_authid = "000102030405060708090a0b0c0d0e0f"

# ----------------------------------------------------------
# ユニークID（UID）
# ----------------------------------------------------------
uid = "000000000000000000000000000001"

# ----------------------------------------------------------
# 更新対象の鍵のID
# ----------------------------------------------------------
kid = "4"

# ----------------------------------------------------------
# KEY_NEWを暗号化・検証するための鍵のID（AuthID）
# ----------------------------------------------------------
authid = "1"

# ----------------------------------------------------------
# カウンタ（C_ID）
# ----------------------------------------------------------
c_id = "0000001"

# ----------------------------------------------------------
# フラグ（F_ID）
#   Bit 4: WRITE_PROTECTION
#   Bit 3: BOOT_PROTECTION
#   Bit 2: DEBUGGER_PROTECTION
#   Bit 1: KEY_USAGE
#   Bit 0: WILDCARD
# ----------------------------------------------------------
f_id = "00"

# ----------------------------------------------------------
# 以上がユーザ変数。
# ここ以降は処理なので変更不要。
# ----------------------------------------------------------

import sys
import binascii
import Crypto.Cipher.AES
import Crypto.Hash.CMAC

# ----------------------------------------------------------
# 【定数】KEY_UPDATE_ENC_C
# ----------------------------------------------------------
key_update_enc_c = "010153484500800000000000000000B0"

# ----------------------------------------------------------
# 【定数】KEY_UPDATE_MAC_C
# ----------------------------------------------------------
key_update_mac_c = "010253484500800000000000000000B0"

# ----------------------------------------------------------
# 【関数】16進文字列かどうかの判定関数。ビット長もチェック。
# ----------------------------------------------------------
def is_hex(val_str, exp_bitlen):
    try:
        if (type(val_str) is not str):
            return False
        if (len(val_str) != ((exp_bitlen + 3) // 4)):
            return False
        val_int = int(val_str, 16)
        if ((val_int < 0) or (val_int >= (2 ** exp_bitlen))):
            return False
        return True
    except:
        return False

# ----------------------------------------------------------
# 【処理】パラメータのビット長をチェック。
# ----------------------------------------------------------
if not is_hex(key_new, 128):
    print("[ERROR] key_new is invalid.")
    sys.exit(0)
if not is_hex(key_authid, 128):
    print("[ERROR] key_authid is invalid.")
    sys.exit(0)
if not is_hex(uid, 120):
    print("[ERROR] uid is invalid.")
    sys.exit(0)
if not is_hex(kid, 4):
    print("[ERROR] uid is invalid.")
    sys.exit(0)
if not is_hex(authid, 4):
    print("[ERROR] uid is invalid.")
    sys.exit(0)
if not is_hex(c_id, 28):
    print("[ERROR] c_id is invalid.")
    sys.exit(0)
if not is_hex(f_id, 5):
    print("[ERROR] f_id is invalid.")
    sys.exit(0)

# ----------------------------------------------------------
# 【関数】AES-ECBの暗号化。
# ----------------------------------------------------------
def enc_aes_ecb(pt, key):
    pt_binstr = binascii.unhexlify(pt)
    key_binstr = binascii.unhexlify(key)
    cipher = Crypto.Cipher.AES.new(key_binstr, Crypto.Cipher.AES.MODE_ECB)
    return cipher.encrypt(pt_binstr).hex()

# ----------------------------------------------------------
# 【テスト用の処理】AES-ECBの暗号化の動作確認。
# ----------------------------------------------------------
enc_aes_ecb_pt = "00112233445566778899aabbccddeeff"
enc_aes_ecb_key = "000102030405060708090a0b0c0d0e0f"
enc_aes_ecb_exp = "69c4e0d86a7b0430d8cdb78070b4c55a"
if enc_aes_ecb(enc_aes_ecb_pt, enc_aes_ecb_key) == enc_aes_ecb_exp:
    print("[OK] enc_aes_ecb is correct")
else:
    print("[NG] enc_aes_ecb is NOT correct")

# ----------------------------------------------------------
# 【関数】AES-CBCの暗号化。
# ----------------------------------------------------------
def enc_aes_cbc(pt, key, iv):
    pt_binstr = binascii.unhexlify(pt)
    key_binstr = binascii.unhexlify(key)
    iv_binstr = binascii.unhexlify(iv)
    cipher = Crypto.Cipher.AES.new(key_binstr, Crypto.Cipher.AES.MODE_CBC, iv_binstr)
    return cipher.encrypt(pt_binstr).hex()

# ----------------------------------------------------------
# 【テスト用の処理】AES-CBCの暗号化の動作確認。
# ----------------------------------------------------------
enc_aes_cbc_key = "2b7e151628aed2a6abf7158809cf4f3c"
enc_aes_cbc_iv = "000102030405060708090a0b0c0d0e0f"
enc_aes_cbc_pt = "6bc1bee22e409f96e93d7e117393172aae2d8a571e03ac9c9eb76fac45af8e5130c81c46a35ce411e5fbc1191a0a52eff69f2445df4f9b17ad2b417be66c3710"
enc_aes_cbc_exp = "7649abac8119b246cee98e9b12e9197d5086cb9b507219ee95db113a917678b273bed6b8e3c1743b7116e69e222295163ff1caa1681fac09120eca307586e1a7"
if enc_aes_cbc(enc_aes_cbc_pt, enc_aes_cbc_key, enc_aes_cbc_iv) == enc_aes_cbc_exp:
    print("[OK] enc_aes_cbc is correct")
else:
    print("[NG] enc_aes_cbc is NOT correct")

# ----------------------------------------------------------
# 【関数】CMACの生成。
# ----------------------------------------------------------
def cmac(msg, key):
    msg_binstr = binascii.unhexlify(msg)
    key_binstr = binascii.unhexlify(key)
    cobj = Crypto.Hash.CMAC.new(key_binstr, ciphermod = Crypto.Cipher.AES)
    cobj.update(msg_binstr)
    return cobj.hexdigest()

# ----------------------------------------------------------
# 【テスト用の処理】CMACの生成の動作確認。
# ----------------------------------------------------------
cmac_key = "2b7e151628aed2a6abf7158809cf4f3c"
cmac_msg1 = "6bc1bee22e409f96e93d7e117393172a"
cmac_exp1 = "070a16b46b4d4144f79bdd9dd04a287c"
cmac_msg2 = "6bc1bee22e409f96e93d7e117393172aae2d8a571e03ac9c9eb76fac45af8e5130c81c46a35ce411"
cmac_exp2 = "dfa66747de9ae63030ca32611497c827"
if cmac(cmac_msg1, cmac_key) == cmac_exp1:
    print("[OK] cmac (1) is correct")
else:
    print("[NG] cmac (1) is NOT correct")
if cmac(cmac_msg2, cmac_key) == cmac_exp2:
    print("[OK] cmac (2) is correct")
else:
    print("[NG] cmac (2) is NOT correct")

# ----------------------------------------------------------
# 【関数】鍵導出。
# ----------------------------------------------------------
def kdf(k, c):
    out0 = "00000000000000000000000000000000"
    out1 = format(int(enc_aes_ecb(k, out0), 16) ^ int(k, 16), '032x')
    out2 = format(int(enc_aes_ecb(c, out1), 16) ^ int(c, 16) ^ int(out1, 16), '032x')
    return out2

# ----------------------------------------------------------
# 【テスト用の処理】鍵導出関数の動作確認。
# ----------------------------------------------------------
kdf_k = "000102030405060708090a0b0c0d0e0f"
kdf_c = "010153484500800000000000000000b0"
kdf_exp = "118a46447a770d87828a69c222e2d17e"
if kdf(kdf_k, kdf_c) == kdf_exp:
    print("[OK] kdf is correct")
else:
    print("[NG] kdf is NOT correct")
    print(kdf(kdf_k, kdf_c))

# ----------------------------------------------------------
# 【処理】K1を生成。
# ----------------------------------------------------------
k1 = kdf(key_authid, key_update_enc_c)

# ----------------------------------------------------------
# 【テスト用の処理】K1の期待値と比較。
# ----------------------------------------------------------
k1_exp = "118a46447a770d87828a69c222e2d17e"
if k1 == k1_exp:
    print("[OK] k1 is correct")
else:
    print("[NG] k1 is NOT correct")

# ----------------------------------------------------------
# 【処理】K2を生成。
# ----------------------------------------------------------
k2 = kdf(key_authid, key_update_mac_c)

# ----------------------------------------------------------
# 【テスト用の処理】K2の期待値と比較。
# ----------------------------------------------------------
k2_exp = "2ebb2a3da62dbd64b18ba6493e9fbe22"
if k2 == k2_exp:
    print("[OK] k2 is correct")
else:
    print("[NG] k2 is NOT correct")

# ----------------------------------------------------------
# 【処理】M1を生成。
# ----------------------------------------------------------
m1 = uid + kid + authid

# ----------------------------------------------------------
# 【テスト用の処理】M1の期待値と比較。
# ----------------------------------------------------------
m1_exp = "00000000000000000000000000000141"
if m1 == m1_exp:
    print("[OK] m1 is correct")
else:
    print("[NG] m1 is NOT correct")

# ----------------------------------------------------------
# 【処理】M2を生成。
# ----------------------------------------------------------
m2_pt = c_id + format(int(f_id, 16) << 3, '02x') + "00000000000000000000000" + key_new
m2 = enc_aes_cbc(m2_pt, k1, "00000000000000000000000000000000")

# ----------------------------------------------------------
# 【テスト用の処理】M2の期待値と比較。
# ----------------------------------------------------------
m2_exp = "2b111e2d93f486566bcbba1d7f7a9797c94643b050fc5d4d7de14cff682203c3"
if m2 == m2_exp:
    print("[OK] m2 is correct")
else:
    print("[NG] m2 is NOT correct")

# ----------------------------------------------------------
# 【処理】M3を生成。
# ----------------------------------------------------------
m3 = cmac(m1 + m2, k2)

# ----------------------------------------------------------
# 【テスト用の処理】M3の期待値と比較。
# ----------------------------------------------------------
m3_exp = "b9d745e5ace7d41860bc63c2b9f5bb46"
if m3 == m3_exp:
    print("[OK] m3 is correct")
else:
    print("[NG] m3 is NOT correct")

# ----------------------------------------------------------
# 【処理】K3を生成。
# ----------------------------------------------------------
k3 = kdf(key_new, key_update_enc_c)

# ----------------------------------------------------------
# 【テスト用の処理】K3の期待値と比較。
# ----------------------------------------------------------
k3_exp = "ed2de7864a47f6bac319a9dc496a788f"
if k3 == k3_exp:
    print("[OK] k3 is correct")
else:
    print("[NG] k3 is NOT correct")

# ----------------------------------------------------------
# 【処理】K4を生成。
# ----------------------------------------------------------
k4 = kdf(key_new, key_update_mac_c)

# ----------------------------------------------------------
# 【テスト用の処理】K4の期待値と比較。
# ----------------------------------------------------------
k4_exp = "ec9386fefaa1c598246144343de5f26a"
if k4 == k4_exp:
    print("[OK] k4 is correct")
else:
    print("[NG] k4 is NOT correct")

# ----------------------------------------------------------
# 【処理】M4を生成。
# ----------------------------------------------------------
m4 = uid + kid + authid + enc_aes_ecb(c_id + "8000000000000000000000000", k3)

# ----------------------------------------------------------
# 【テスト用の処理】M4の期待値と比較。
# ----------------------------------------------------------
m4_exp = "00000000000000000000000000000141b472e8d8727d70d57295e74849a27917"
if m4 == m4_exp:
    print("[OK] m4 is correct")
else:
    print("[NG] m4 is NOT correct")

# ----------------------------------------------------------
# 【処理】M5を生成。
# ----------------------------------------------------------
m5 = cmac(m4, k4)

# ----------------------------------------------------------
# 【テスト用の処理】M5の期待値と比較。
# ----------------------------------------------------------
m5_exp = "820d8d95dc11b4668878160cb2a4e23e"
if m5 == m5_exp:
    print("[OK] m5 is correct")
else:
    print("[NG] m5 is NOT correct")
